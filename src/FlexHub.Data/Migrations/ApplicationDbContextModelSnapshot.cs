// <auto-generated />
using System;
using FlexHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlexHub.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlexHub.Data.Entities.Contact", b =>
                {
                    b.Property<string>("UserObjectId")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ContactObjectId")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("UserObjectId", "ContactObjectId");

                    b.HasIndex("ContactObjectId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.ContactRequest", b =>
                {
                    b.Property<string>("SenderUserObjectId")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ReceiverUserObjectId")
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("SenderUserObjectId", "ReceiverUserObjectId");

                    b.HasIndex("ReceiverUserObjectId");

                    b.ToTable("ContactRequests");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.DirectMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReceiverUserObjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SenderUserObjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverUserObjectId");

                    b.HasIndex("SenderUserObjectId", "ReceiverUserObjectId", "CreatedAt")
                        .IsUnique();

                    b.ToTable("DirectMessages");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.GroupChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GroupChats");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.GroupMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupChatId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SenderUserObjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("SenderUserObjectId");

                    b.HasIndex("GroupChatId", "CreatedAt")
                        .IsUnique();

                    b.ToTable("GroupMessages");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserObjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("UserObjectId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostsTags");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.User", b =>
                {
                    b.Property<string>("ObjectId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ObjectId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.UserGroupChat", b =>
                {
                    b.Property<string>("UserObjectId")
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("GroupChatId")
                        .HasColumnType("int");

                    b.HasKey("UserObjectId", "GroupChatId");

                    b.HasIndex("GroupChatId");

                    b.ToTable("UsersGroupChats");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.UserTag", b =>
                {
                    b.Property<string>("UserObjectId")
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("UserObjectId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("UsersTags");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.Contact", b =>
                {
                    b.HasOne("FlexHub.Data.Entities.User", "ContactUser")
                        .WithMany()
                        .HasForeignKey("ContactObjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlexHub.Data.Entities.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.ContactRequest", b =>
                {
                    b.HasOne("FlexHub.Data.Entities.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserObjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlexHub.Data.Entities.User", "SenderUser")
                        .WithMany("ContactRequests")
                        .HasForeignKey("SenderUserObjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.DirectMessage", b =>
                {
                    b.HasOne("FlexHub.Data.Entities.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserObjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlexHub.Data.Entities.User", "SenderUser")
                        .WithMany("DirectMessages")
                        .HasForeignKey("SenderUserObjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.GroupMessage", b =>
                {
                    b.HasOne("FlexHub.Data.Entities.GroupChat", "GroupChat")
                        .WithMany("GroupMessages")
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexHub.Data.Entities.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChat");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.Post", b =>
                {
                    b.HasOne("FlexHub.Data.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.PostTag", b =>
                {
                    b.HasOne("FlexHub.Data.Entities.Post", "Post")
                        .WithMany("PostsTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexHub.Data.Entities.Tag", "Tag")
                        .WithMany("PostsTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.UserGroupChat", b =>
                {
                    b.HasOne("FlexHub.Data.Entities.GroupChat", "GroupChat")
                        .WithMany("GroupChatsUsers")
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexHub.Data.Entities.User", "User")
                        .WithMany("GroupChatsUsers")
                        .HasForeignKey("UserObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupChat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.UserTag", b =>
                {
                    b.HasOne("FlexHub.Data.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexHub.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.GroupChat", b =>
                {
                    b.Navigation("GroupChatsUsers");

                    b.Navigation("GroupMessages");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.Post", b =>
                {
                    b.Navigation("PostsTags");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.Tag", b =>
                {
                    b.Navigation("PostsTags");
                });

            modelBuilder.Entity("FlexHub.Data.Entities.User", b =>
                {
                    b.Navigation("ContactRequests");

                    b.Navigation("Contacts");

                    b.Navigation("DirectMessages");

                    b.Navigation("GroupChatsUsers");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
